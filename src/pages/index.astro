---
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
import TokenModal from '../components/TokenModal.astro';
---

<Layout title="WZPDCL Prepaid Token Extractor">
  <main class="flex items-start justify-center p-2 sm:p-4 pt-8 sm:pt-16">
    <div class="container max-w-4xl mx-auto px-3 sm:px-6 py-5 sm:py-8 bg-white shadow-lg rounded-lg">
      <!-- Two-column layout for desktop, single column for mobile -->
      <div class="flex flex-col lg:flex-row lg:space-x-6">
        <!-- Left column: Input section -->
        <div class="lg:w-1/2 mb-4 lg:mb-0">
          <h1 class="text-2xl sm:text-3xl font-bold mb-2 text-indigo-700">WZPDCL Prepaid Token Extractor</h1>
          <p class="text-gray-700 mb-4 text-sm">Beautify WZPDCL Prepaid Token SMS.</p>

          <div class="mb-4">
            <textarea
              id="tokenMessage"
              class="w-full mt-1 p-3 rounded-md border border-gray-300 focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-200"
              rows="5"
              placeholder="Paste your WZPDCL token SMS here..."
            ></textarea>
          </div>

          <div class="flex flex-row justify-start space-x-2">
            <button
              id="copyAllButton"
              class="w-auto px-4 py-2 text-sm bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600 transition-colors hidden"
            >
              Copy Token and Info
            </button>
          </div>
        </div>

        <!-- Right column: Output section -->
        <div class="lg:w-1/2">
          <!-- Placeholder when no token data is available -->
          <div id="tokenPlaceholder" class="min-h-[300px] flex flex-col items-center justify-center p-6 bg-gray-50 rounded-lg border border-gray-200 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 class="text-lg font-semibold text-gray-500 mb-2">No Token Data</h3>
            <p class="text-gray-400 text-sm">Paste your WZPDCL SMS in the input field to extract token information</p>
          </div>

          <!-- Display extracted token data -->
          <div id="tokenDataDisplay" class="hidden min-h-[300px]">
            <h2 class="text-xl font-bold mb-3 text-indigo-600">Token Information</h2>

            <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
              <div class="mb-3">
                <h3 class="text-sm font-semibold text-gray-500 mb-1">WZPDCL Prepaid Token:</h3>
                <pre id="prepaidToken" class="bg-white p-2 rounded border border-gray-200 text-base font-mono overflow-x-auto"></pre>
              </div>

              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <div>
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Sequence Number:</h3>
                  <p id="sequenceNumber" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div>
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Meter Number:</h3>
                  <p id="meterNumber" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="vendingAmountContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Vending Amount:</h3>
                  <p id="vendingAmount" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="energyCostContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Energy Cost:</h3>
                  <p id="energyCost" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="totalChargeContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Total Charge:</h3>
                  <p id="totalCharge" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="meterRentContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Meter Rent:</h3>
                  <p id="meterRent" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="demandChargeContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Demand Charge:</h3>
                  <p id="demandCharge" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="vatContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">VAT:</h3>
                  <p id="vat" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>

                <div id="rebateContainer" class="hidden">
                  <h3 class="text-sm font-semibold text-gray-500 mb-1">Rebate:</h3>
                  <p id="rebate" class="bg-white p-2 rounded border border-gray-200 text-sm"></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <Footer />
  <TokenModal />
</Layout>

<script>
  import { extractTokenInfo, formatTokenForCopy } from '../utils/tokenExtractor';
  import { saveToken, getSavedTokens, deleteToken, clearAllTokens } from '../utils/tokenStorage';

  document.addEventListener('DOMContentLoaded', () => {
    const tokenMessage = document.getElementById('tokenMessage') as HTMLTextAreaElement;
    const copyAllButton = document.getElementById('copyAllButton') as HTMLButtonElement;
    const tokenDataDisplay = document.getElementById('tokenDataDisplay') as HTMLDivElement;
    const tokenPlaceholder = document.getElementById('tokenPlaceholder') as HTMLDivElement;

    // Modal elements
    const tokenModal = document.getElementById('tokenModal') as HTMLDivElement;
    const openModalBtn = document.getElementById('openModalBtn') as HTMLButtonElement;
    const closeModal = document.getElementById('closeModal') as HTMLButtonElement;
    const clearAllTokensBtn = document.getElementById('clearAllTokens') as HTMLButtonElement;
    const savedTokensListModal = document.getElementById('savedTokensListModal') as HTMLDivElement;
    const noSavedTokensModal = document.getElementById('noSavedTokensModal') as HTMLDivElement;
    const tokenCountBadge = document.getElementById('tokenCountBadge') as HTMLSpanElement;
    const tokenButtonTooltip = document.getElementById('tokenButtonTooltip') as HTMLDivElement;

    // Elements for displaying token data
    const prepaidToken = document.getElementById('prepaidToken') as HTMLPreElement;
    const sequenceNumber = document.getElementById('sequenceNumber') as HTMLParagraphElement;
    const meterNumber = document.getElementById('meterNumber') as HTMLParagraphElement;

    // Optional elements
    const vendingAmount = document.getElementById('vendingAmount') as HTMLParagraphElement;
    const energyCost = document.getElementById('energyCost') as HTMLParagraphElement;
    const totalCharge = document.getElementById('totalCharge') as HTMLParagraphElement;
    const meterRent = document.getElementById('meterRent') as HTMLParagraphElement;
    const demandCharge = document.getElementById('demandCharge') as HTMLParagraphElement;
    const vat = document.getElementById('vat') as HTMLParagraphElement;
    const rebate = document.getElementById('rebate') as HTMLParagraphElement;

    // Containers for optional elements
    const vendingAmountContainer = document.getElementById('vendingAmountContainer') as HTMLDivElement;
    const energyCostContainer = document.getElementById('energyCostContainer') as HTMLDivElement;
    const totalChargeContainer = document.getElementById('totalChargeContainer') as HTMLDivElement;
    const meterRentContainer = document.getElementById('meterRentContainer') as HTMLDivElement;
    const demandChargeContainer = document.getElementById('demandChargeContainer') as HTMLDivElement;
    const vatContainer = document.getElementById('vatContainer') as HTMLDivElement;
    const rebateContainer = document.getElementById('rebateContainer') as HTMLDivElement;

    // Current token data and tracking variables
    let currentTokenData: any = null;
    let lastSavedToken: string | null = null;

    // Function to update the UI with token data
    const updateTokenUI = (tokenData: any) => {
      if (!tokenData) {
        tokenDataDisplay.classList.add('hidden');
        tokenPlaceholder.classList.remove('hidden');
        copyAllButton.classList.add('hidden');
        return;
      }

      // Display the token data
      prepaidToken.textContent = tokenData.prepaidtoken;
      sequenceNumber.textContent = tokenData.sequencenumber || 'Not found';
      meterNumber.textContent = tokenData.meternumber || 'Not found';

      // Handle optional fields
      if (tokenData.vendingamount) {
        vendingAmount.textContent = tokenData.vendingamount;
        vendingAmountContainer.classList.remove('hidden');
      } else {
        vendingAmountContainer.classList.add('hidden');
      }

      if (tokenData.energycost) {
        energyCost.textContent = tokenData.energycost;
        energyCostContainer.classList.remove('hidden');
      } else {
        energyCostContainer.classList.add('hidden');
      }

      if (tokenData.totalcharge) {
        totalCharge.textContent = tokenData.totalcharge;
        totalChargeContainer.classList.remove('hidden');
      } else {
        totalChargeContainer.classList.add('hidden');
      }

      if (tokenData.meterrent) {
        meterRent.textContent = tokenData.meterrent;
        meterRentContainer.classList.remove('hidden');
      } else {
        meterRentContainer.classList.add('hidden');
      }

      if (tokenData.demandcharge) {
        demandCharge.textContent = tokenData.demandcharge;
        demandChargeContainer.classList.remove('hidden');
      } else {
        demandChargeContainer.classList.add('hidden');
      }

      if (tokenData.vat) {
        vat.textContent = tokenData.vat;
        vatContainer.classList.remove('hidden');
      } else {
        vatContainer.classList.add('hidden');
      }

      if (tokenData.rebate) {
        rebate.textContent = tokenData.rebate;
        rebateContainer.classList.remove('hidden');
      } else {
        rebateContainer.classList.add('hidden');
      }

      // Show the token data display and buttons, hide placeholder
      tokenDataDisplay.classList.remove('hidden');
      tokenPlaceholder.classList.add('hidden');
      copyAllButton.classList.remove('hidden');

      // Auto-save the token if it's new
      const tokenKey = `${tokenData.prepaidtoken}-${tokenData.meternumber || ''}`;
      if (tokenKey !== lastSavedToken && tokenData.prepaidtoken) {
        const savedToken = saveToken(tokenData);
        if (savedToken) {
          lastSavedToken = tokenKey;

          // Update the modal list
          renderSavedTokensModal();
        }
      }
    };

    // Function to process token message
    const processTokenMessage = () => {
      const message = tokenMessage.value;
      currentTokenData = extractTokenInfo(message);
      updateTokenUI(currentTokenData);
    };

    // Function to render saved tokens in the modal
    const renderSavedTokensModal = () => {
      const savedTokens = getSavedTokens();

      // Update the badge count
      if (savedTokens.length > 0) {
        tokenCountBadge.textContent = savedTokens.length > 99 ? '99+' : savedTokens.length.toString();
        tokenCountBadge.classList.remove('hidden');
        tokenCountBadge.classList.add('flex');
      } else {
        tokenCountBadge.classList.add('hidden');
        tokenCountBadge.classList.remove('flex');
      }

      if (savedTokens.length === 0) {
        noSavedTokensModal.classList.remove('hidden');
        savedTokensListModal.innerHTML = '';
        return;
      }

      noSavedTokensModal.classList.add('hidden');
      savedTokensListModal.innerHTML = '';

      // Sort tokens by date, newest first
      savedTokens.sort((a, b) => b.savedAt - a.savedAt);

      savedTokens.forEach(token => {
        const tokenElement = document.createElement('div');
        tokenElement.className = 'bg-white p-3 rounded-lg border border-gray-200 mb-3';

        const date = new Date(token.savedAt);
        const formattedDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();

        tokenElement.innerHTML = `
          <div class="flex justify-between items-start mb-2">
            <div>
              <h3 class="text-sm font-semibold text-gray-700">Meter: ${token.meternumber || 'Unknown'}</h3>
              <p class="text-xs text-gray-500">${formattedDate}</p>
            </div>
            <div class="flex space-x-2">
              <button class="load-token-btn text-xs px-2 py-1 bg-indigo-500 text-white rounded hover:bg-indigo-600" data-id="${token.id}">Load</button>
              <button class="delete-token-btn text-xs px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600" data-id="${token.id}">Delete</button>
            </div>
          </div>
          <div class="text-sm font-mono bg-gray-50 p-2 rounded border border-gray-200 overflow-x-auto whitespace-pre-wrap">${token.originalMessage ? token.originalMessage.trim() : 'No message data'}</div>
        `;

        savedTokensListModal.appendChild(tokenElement);
      });

      // Add event listeners to the load and delete buttons
      document.querySelectorAll('.load-token-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLButtonElement).getAttribute('data-id');
          const token = savedTokens.find(t => t.id === id);
          if (token) {
            // Close the modal
            tokenModal.classList.add('hidden');

            // Set the original message in the textarea
            tokenMessage.value = token.originalMessage ? token.originalMessage.trim() : '';

            // Process the token
            currentTokenData = token;
            updateTokenUI(token);
          }
        });
      });

      document.querySelectorAll('.delete-token-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = (e.currentTarget as HTMLButtonElement).getAttribute('data-id');
          if (id) {
            deleteToken(id);
            renderSavedTokensModal();
          }
        });
      });
    };

    // Add event listener for real-time extraction
    tokenMessage.addEventListener('input', processTokenMessage);

    // Copy token and essential information functionality
    copyAllButton.addEventListener('click', () => {
      if (!currentTokenData) return;

      const allInfo = formatTokenForCopy(currentTokenData);

      // Copy to clipboard
      navigator.clipboard.writeText(allInfo)
        .then(() => {
          // Show success feedback
          const originalText = copyAllButton.textContent;
          copyAllButton.textContent = 'Copied!';
          copyAllButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          copyAllButton.classList.add('bg-green-500', 'hover:bg-green-600');

          setTimeout(() => {
            copyAllButton.textContent = originalText;
            copyAllButton.classList.remove('bg-green-500', 'hover:bg-green-600');
            copyAllButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        })
        .catch(err => {
          console.error('Could not copy text: ', err);
        });
    });

    // Modal functionality
    openModalBtn.addEventListener('click', () => {
      renderSavedTokensModal();
      tokenModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
    });

    closeModal.addEventListener('click', () => {
      tokenModal.classList.add('hidden');
      document.body.style.overflow = ''; // Re-enable scrolling
    });

    // Close modal when clicking outside of it
    tokenModal.addEventListener('click', (e) => {
      if (e.target === tokenModal) {
        tokenModal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });

    // Tooltip functionality
    openModalBtn.addEventListener('mouseenter', () => {
      tokenButtonTooltip.classList.add('opacity-100');
    });

    openModalBtn.addEventListener('mouseleave', () => {
      tokenButtonTooltip.classList.remove('opacity-100');
    });

    // For touch devices
    openModalBtn.addEventListener('touchstart', () => {
      tokenButtonTooltip.classList.add('opacity-100');
      setTimeout(() => {
        tokenButtonTooltip.classList.remove('opacity-100');
      }, 1500);
    });

    // Clear all tokens
    clearAllTokensBtn.addEventListener('click', () => {
      if (confirm('Are you sure you want to delete all saved tokens? This action cannot be undone.')) {
        clearAllTokens();
        renderSavedTokensModal();
      }
    });

    // Initialize
    renderSavedTokensModal();
  });
</script>
