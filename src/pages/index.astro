---
import Layout from '../layouts/Layout.astro';
---

<Layout title="WZPDCL Prepaid Token Extractor">
  <main class="flex items-center justify-center min-h-screen p-4">
    <div class="container max-w-3xl mx-auto px-6 py-10 bg-white shadow-lg rounded-lg">
      <h1 class="text-3xl md:text-4xl font-bold mb-4 text-indigo-700">WZPDCL Prepaid Token Extractor</h1>
      <p class="text-gray-700 mb-6">Beautify WZPDCL Prepaid Token SMS.</p>

      <div class="mb-6">
        <textarea
          id="tokenMessage"
          class="w-full mt-1 p-3 rounded-md border border-gray-300 focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-200"
          rows="4"
          placeholder="Paste your WZPDCL token SMS here..."
        ></textarea>
      </div>

      <div class="flex flex-col sm:flex-row justify-start space-y-2 sm:space-y-0 sm:space-x-2">
        <button
          id="copyButton"
          class="w-full sm:w-auto px-6 py-3 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:bg-gray-300 transition-colors hidden"
        >
          Copy Token
        </button>
        <button
          id="copyAllButton"
          class="w-full sm:w-auto px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600 transition-colors hidden"
        >
          Copy Essential Info
        </button>
      </div>

      <!-- Display extracted token data -->
      <div id="tokenDataDisplay" class="mt-8 hidden">
        <h2 class="text-xl font-bold mb-4 text-indigo-600">Token Information</h2>

        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
          <div class="mb-4">
            <h3 class="text-sm font-semibold text-gray-500 mb-1">WZPDCL Prepaid Token:</h3>
            <pre id="prepaidToken" class="bg-white p-3 rounded border border-gray-200 text-lg font-mono"></pre>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Sequence Number:</h3>
              <p id="sequenceNumber" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div>
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Meter Number:</h3>
              <p id="meterNumber" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="vendingAmountContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Vending Amount:</h3>
              <p id="vendingAmount" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="energyCostContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Energy Cost:</h3>
              <p id="energyCost" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="totalChargeContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Total Charge:</h3>
              <p id="totalCharge" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="meterRentContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Meter Rent:</h3>
              <p id="meterRent" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="demandChargeContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Demand Charge:</h3>
              <p id="demandCharge" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="vatContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">VAT:</h3>
              <p id="vat" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>

            <div id="rebateContainer" class="hidden">
              <h3 class="text-sm font-semibold text-gray-500 mb-1">Rebate:</h3>
              <p id="rebate" class="bg-white p-2 rounded border border-gray-200"></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Token extraction functionality
  document.addEventListener('DOMContentLoaded', () => {
    const tokenMessage = document.getElementById('tokenMessage') as HTMLTextAreaElement;
    const copyButton = document.getElementById('copyButton') as HTMLButtonElement;
    const copyAllButton = document.getElementById('copyAllButton') as HTMLButtonElement;
    const tokenDataDisplay = document.getElementById('tokenDataDisplay') as HTMLDivElement;

    // Elements for displaying token data
    const prepaidToken = document.getElementById('prepaidToken') as HTMLPreElement;
    const sequenceNumber = document.getElementById('sequenceNumber') as HTMLParagraphElement;
    const meterNumber = document.getElementById('meterNumber') as HTMLParagraphElement;

    // Optional elements
    const vendingAmount = document.getElementById('vendingAmount') as HTMLParagraphElement;
    const energyCost = document.getElementById('energyCost') as HTMLParagraphElement;
    const totalCharge = document.getElementById('totalCharge') as HTMLParagraphElement;
    const meterRent = document.getElementById('meterRent') as HTMLParagraphElement;
    const demandCharge = document.getElementById('demandCharge') as HTMLParagraphElement;
    const vat = document.getElementById('vat') as HTMLParagraphElement;
    const rebate = document.getElementById('rebate') as HTMLParagraphElement;

    // Containers for optional elements
    const vendingAmountContainer = document.getElementById('vendingAmountContainer') as HTMLDivElement;
    const energyCostContainer = document.getElementById('energyCostContainer') as HTMLDivElement;
    const totalChargeContainer = document.getElementById('totalChargeContainer') as HTMLDivElement;
    const meterRentContainer = document.getElementById('meterRentContainer') as HTMLDivElement;
    const demandChargeContainer = document.getElementById('demandChargeContainer') as HTMLDivElement;
    const vatContainer = document.getElementById('vatContainer') as HTMLDivElement;
    const rebateContainer = document.getElementById('rebateContainer') as HTMLDivElement;

    // Function to extract token information
    const extractTokenInfo = () => {
      const message = tokenMessage.value;
      if (!message) {
        tokenDataDisplay.classList.add('hidden');
        copyButton.classList.add('hidden');
        copyAllButton.classList.add('hidden');
        return;
      }

      const tokenData: Record<string, string> = {};

      const regexPatterns = {
        prepaidtoken: /Token is ((?:\d{4}-\d{4}-\d{4}-\d{4}-\d{4},?)+)/,
        sequencenumber: /SeqNo:([\d=]+)/,
        meternumber: /for Meter No:(\d+)/,
        vendingamount: /Vending Amt:(\d+\.\d+)/,
        energycost: /Enrg Cost(\d+\.\d+)/,
        totalcharge: /Total Charge:(\d+\.\d+)/,
        meterrent: /Meter Rent 1P:(\d+)/,
        demandcharge: /Demand Charge:(\d+)/,
        vat: /VAT:(\d+\.\d+)/,
        rebate: /Rebate:(-\d+\.\d+)/
      };

      for (const [key, regex] of Object.entries(regexPatterns)) {
        const match = message.match(regex);
        if (match) {
          tokenData[key] = match[1];
        }
      }

      // Only show the token data if we have at least the token
      if (tokenData['prepaidtoken']) {
        // Format the token with line breaks instead of commas
        // Some SMS messages have multiple tokens separated by commas
        tokenData['prepaidtoken'] = tokenData['prepaidtoken'].replace(/,/g, '\n');

        // Display the token data
        prepaidToken.textContent = tokenData['prepaidtoken'];
        sequenceNumber.textContent = tokenData['sequencenumber'] || 'Not found';
        meterNumber.textContent = tokenData['meternumber'] || 'Not found';

        // Handle optional fields
        if (tokenData['vendingamount']) {
          vendingAmount.textContent = tokenData['vendingamount'];
          vendingAmountContainer.classList.remove('hidden');
        } else {
          vendingAmountContainer.classList.add('hidden');
        }

        if (tokenData['energycost']) {
          energyCost.textContent = tokenData['energycost'];
          energyCostContainer.classList.remove('hidden');
        } else {
          energyCostContainer.classList.add('hidden');
        }

        if (tokenData['totalcharge']) {
          totalCharge.textContent = tokenData['totalcharge'];
          totalChargeContainer.classList.remove('hidden');
        } else {
          totalChargeContainer.classList.add('hidden');
        }

        if (tokenData['meterrent']) {
          meterRent.textContent = tokenData['meterrent'];
          meterRentContainer.classList.remove('hidden');
        } else {
          meterRentContainer.classList.add('hidden');
        }

        if (tokenData['demandcharge']) {
          demandCharge.textContent = tokenData['demandcharge'];
          demandChargeContainer.classList.remove('hidden');
        } else {
          demandChargeContainer.classList.add('hidden');
        }

        if (tokenData['vat']) {
          vat.textContent = tokenData['vat'];
          vatContainer.classList.remove('hidden');
        } else {
          vatContainer.classList.add('hidden');
        }

        if (tokenData['rebate']) {
          rebate.textContent = tokenData['rebate'];
          rebateContainer.classList.remove('hidden');
        } else {
          rebateContainer.classList.add('hidden');
        }

        // Show the token data display and copy buttons
        tokenDataDisplay.classList.remove('hidden');
        copyButton.classList.remove('hidden');
        copyAllButton.classList.remove('hidden');
      } else {
        // Hide the token data display and copy buttons if no token is found
        tokenDataDisplay.classList.add('hidden');
        copyButton.classList.add('hidden');
        copyAllButton.classList.add('hidden');
      }
    };

    // Add event listener for real-time extraction
    tokenMessage.addEventListener('input', extractTokenInfo);

    // Copy token functionality
    copyButton.addEventListener('click', () => {
      const tokenText = prepaidToken.textContent;
      if (tokenText) {
        navigator.clipboard.writeText(tokenText)
          .then(() => {
            // Show success feedback
            const originalText = copyButton.textContent;
            copyButton.textContent = 'Copied!';
            copyButton.classList.remove('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
            copyButton.classList.add('bg-green-500', 'text-white', 'hover:bg-green-600');

            setTimeout(() => {
              copyButton.textContent = originalText;
              copyButton.classList.remove('bg-green-500', 'text-white', 'hover:bg-green-600');
              copyButton.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
            }, 2000);
          })
          .catch(err => {
            console.error('Could not copy text: ', err);
          });
      }
    });

    // Copy essential token information functionality
    copyAllButton.addEventListener('click', () => {
      // Format only the essential token information in a clean, shareable format
      let allInfo = 'Token Information\n';

      // Add token
      if (prepaidToken.textContent) {
        allInfo += 'WZPDCL Prepaid Token:\n' + prepaidToken.textContent + '\n\n';
      }

      // Add sequence number
      if (sequenceNumber.textContent) {
        allInfo += 'Sequence Number: ' + sequenceNumber.textContent + '\n';
      }

      // Add meter number
      if (meterNumber.textContent) {
        allInfo += 'Meter Number: ' + meterNumber.textContent + '\n';
      }

      // We're not including any of the optional financial details as per user request

      // Copy to clipboard
      navigator.clipboard.writeText(allInfo)
        .then(() => {
          // Show success feedback
          const originalText = copyAllButton.textContent;
          copyAllButton.textContent = 'Info Copied!';
          copyAllButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          copyAllButton.classList.add('bg-green-500', 'hover:bg-green-600');

          setTimeout(() => {
            copyAllButton.textContent = originalText;
            copyAllButton.classList.remove('bg-green-500', 'hover:bg-green-600');
            copyAllButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        })
        .catch(err => {
          console.error('Could not copy text: ', err);
        });
    });
  });
</script>
